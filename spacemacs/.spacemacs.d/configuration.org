#+TITLE: Spacemacs Configuration
#+AUTHOR: Roland Coeurjoly
#+EMAIL: rolandcoeurjoly@gmail.com
#+OPTIONS: toc:nil num:nil

* Org mode
** Itself
   #+begin_src emacs-lisp
;;(add-to-list 'load-path "~/org-mode/lisp")
   #+end_src

** Agenda
   #+begin_src emacs-lisp
(setq org-agenda-files '("~/Exocortex"))
   #+end_src
*** Ignore files
    #+begin_src emacs-lisp
(custom-set-variables
 '(org-agenda-custom-commands
   '(("c" "Custom agenda, ignore IGNORE_FOR_AGENDA tag"
      ((agenda ""))
      ((org-agenda-tag-filter-preset '("-IGNORE_FOR_AGENDA")))))))
    #+end_src
** Project management
    Record the time that a todo was archived.

#+BEGIN_SRC emacs-lisp
  (setq org-log-done 'time)
#+END_SRC
*** Project structure

**** Generic project
     #+begin_src emacs-lisp
(setq org-capture-templates
      '(("j" "JIRA" entry
         (file+headline "~/Exocortex/Exocortex.org" "JIRAs")
         (file "~/dotfiles/spacemacs/.spacemacs.d/templates/JIRA.txt"))
        ("p" "project" entry
         (file+headline "~/Exocortex/Exocortex.org" "projects")
         (file "~/dotfiles/spacemacs/.spacemacs.d/templates/project.txt"))))
     #+end_src




        #+begin_src emacs-lisp
(defun insert-orgproject-template ()
  "Insert org project template under current heading."
  (interactive)
  (org-insert-heading-respect-content)
  (org-metaright)
  (insert "Rationale")
  (org-insert-heading-respect-content)
  (insert "Desired result (Definition of Done)")
  (org-insert-heading-respect-content)
  (insert "Results")
  (org-insert-heading-respect-content)
  (insert "Relevant information")
  (org-insert-heading-respect-content)
  (org-metaright)
  (insert "Stream of Consciousness")
  (org-insert-heading-respect-content)
  (org-metaleft)
  (insert "Actions")
  (org-insert-heading-respect-content)
  (org-metaright)
  (insert "TODO_NEXT Determine the next [[file+emacs:~/Exocortex/20200427191126-moonshots.org::* Work on the hard part first][monkey action]] :monkey:"))
#+end_src

**** JIRA Issue
        #+begin_src emacs-lisp
(defun insert-jira-template (jira-code)
  "Insert org project template under current heading."
  (interactive)
  (org-insert-link (concat "https://jira-inntech.grupobme.es/jira/browse/" jira-code) jira-code)
  (org-insert-heading-respect-content)
  (org-metaright)
  (insert "Rationale")
  (org-insert-heading-respect-content)
  (insert "Desired result (Definition of Done)")
  (org-insert-heading-respect-content)
  (insert "Informe de resolución")
  (org-insert-heading-respect-content)
  (org-metaright)
  (insert "Acciones realizadas")
  (org-insert-heading-respect-content)
  (org-metaright)
  (insert "Análisis de impacto")
  (org-insert-heading-respect-content)
  (org-metaright)
  (insert "Pruebas sugeridas")
  (org-insert-heading-respect-content)
  (org-metaleft)
  (insert "Relevant information")
  (org-insert-heading-respect-content)
  (org-metaright)
  (insert "Stream of Consciousness")
  (org-insert-heading-respect-content)
  (org-metaleft)
  (insert "Actions")
  (org-insert-heading-respect-content)
  (org-metaright)
  (insert "TODO_NEXT Determine the next [[file+emacs:~/Exocortex/20200427191126-moonshots.org::* Work on the hard part first][monkey action]] :monkey:"))
#+end_src
** Babel
*** Elixir
    #+begin_src emacs-lisp
(add-to-list 'load-path "~/ob-elixir/ob-elixir.el")
(require 'ob-elixir)
    #+end_src

*** Languages
    Allow =babel= to evaluate Emacs lisp, verilog  or Gnuplot code.

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (gnuplot . t)
     ;;(arduino . t)
     ;(verilog . t)
     (clojure . t)
     (C . t)
     (latex . t)
     (shell . t)
     (R . t)
     (sql . t)
     (perl . t)
     (python . t)
     (lua . t)
     (haskell . t)
     (coq . t)
     (ocaml . t)
     (sqlite . t)
     (org . t)
     (elixir . t)
     (dot . t)))
#+END_SRC
*** highlighting
Use syntax highlighting in source blocks while editing.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC
[[https://www.wisdomandwonder.com/link/9573/how-to-correctly-enable-flycheck-in-babel-source-blocks][how to correctly enable flycheck in babel source blocks]]
#+BEGIN_SRC emacs-lisp
(defadvice org-edit-src-code (around set-buffer-file-name activate compile)
  (let ((file-name (buffer-file-name))) ;; (1)
    ad-do-it                            ;; (2)
    (setq buffer-file-name file-name))) ;; (3)
#+END_SRC
Make TAB act as if it were issued in a buffer of the language's major mode.

#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

Don't ask before evaluating code blocks.

#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

For tangling to work with makefiles:

#+BEGIN_SRC emacs-lisp
  (setq org-src-preserve-indentation t)
#+END_SRC

Insertion of code blocks

#+BEGIN_SRC emacs-lisp
;;(require 'org-tempo)
(add-to-list 'org-structure-template-alist
'("sh" . "src shell"))
(add-to-list 'org-structure-template-alist
'("cpp" . "src C++"))
(add-to-list 'org-structure-template-alist
'("py" . "src python"))
#+END_SRC
*** Export
    #+begin_src emacs-lisp
(setq org-export-babel-evaluate nil)
    #+end_src

** Roam
   #+begin_src emacs-lisp
(setq org-roam-directory "~/Exocortex/")
(load-file "~/dotfiles/spacemacs/.spacemacs.d/layers/org-roam/packages.el")
'(org-roam-completion-system (quote helm))
   #+end_src

*** Export
    #+begin_src emacs-lisp
(defun my/org-roam--backlinks-list-with-content (file)
  (with-temp-buffer
    (if-let* ((backlinks (org-roam--get-backlinks file))
              (grouped-backlinks (--group-by (nth 0 it) backlinks)))
        (progn
          (insert (format "\n\n* %d Backlinks\n"
                          (length backlinks)))
          (dolist (group grouped-backlinks)
            (let ((file-from (car group))
                  (bls (cdr group)))
              (insert (format "** [[file:%s][%s]]\n"
                              file-from
                              (org-roam--get-title-or-slug file-from)))
              (dolist (backlink bls)
                (pcase-let ((`(,file-from _ ,props) backlink))
                  (insert (s-trim (s-replace "\n" " " (plist-get props :content))))
                  (insert "\n\n")))))))
    (buffer-string)))

  (defun my/org-export-preprocessor (backend)
    (let ((links (my/org-roam--backlinks-list-with-content (buffer-file-name))))
      (unless (string= links "")
        (save-excursion
          (goto-char (point-max))
          (insert (concat "\n* Backlinks\n") links)))))

  (add-hook 'org-export-before-processing-hook 'my/org-export-preprocessor)
    #+end_src

** General
   Recommended setting in the manual
   #+BEGIN_SRC emacs-lisp
;; Org-mode settings
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(global-font-lock-mode 1)
   #+END_SRC
** Tables
   To be able to shrink table:
   #+begin_src emacs-lisp
(setq org-startup-align-all-table t)
(setq org-startup-shrink-all-tables t)
   #+end_src

** TODOs
*** Change to DONE when children are DONE
    [[https://orgmode.org/manual/Breaking-down-tasks.html][If you would like a TODO entry to automatically change to DONE when all children are done, you can use the following setup:]]
   #+begin_src emacs-lisp
;;(defun org-summary-todo (n-done n-not-done)
;;  "Switch entry to DONE when all subentries are done, to TODO otherwise."
;;  (let (org-log-done org-log-states)   ; turn off logging
;;    (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

;; (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
   #+end_src
*** Do not fontify DONE headings, otherwise links cannot be seen
    #+begin_src emacs-lisp
(setq org-fontify-done-headline nil)
    #+end_src

*** Set global TODO keywords
#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO_NEXT(n!)" "TODO(t!)" "WAIT(w!)" "|" "DONE(d!)" "CANCELED(c!)")))
#+end_src

*** Calculate statistics taking into account all [[https://orgmode.org/manual/Breaking-down-tasks.html][children]]
    #+begin_src emacs-lisp
(setq org-hierarchical-todo-statistics t)
    #+end_src
** Roam
   #+begin_src emacs-lisp
(load-file "~/dotfiles/spacemacs/.spacemacs.d/layers/org-roam/packages.el")
'(org-roam-completion-system (quote helm))
   #+end_src

** Visual
    I like seeing a little downward-pointing arrow instead of the usual ellipsis
   (=...=) that org displays when there's stuff under a header.
#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "⤵")
#+END_SRC

#+BEGIN_SRC emacs-lisp
;;(setq org-bullets-bullet-list '("■" "◆" "▲" "▶"))
;;(setq org-bullets-bullet-list '("甲" "乙" "丙" "丁"))
(setq org-bullets-bullet-list '("①" "②" "③" "④" "⑤" "⑥" "⑦" "⑧" "⑨" "⑩" "⑪" "⑫" "⑬" "⑭" "⑮" "⑯" "⑰" "⑱" "⑲" "⑳"))
#+END_SRC

#+RESULTS:
| ① | ② | ③ | ④ | ⑤ | ⑥ | ⑦ | ⑧ | ⑨ | ⑩ | ⑪ | ⑫ | ⑬ | ⑭ | ⑮ | ⑯ | ⑰ | ⑱ | ⑲ | ⑳ |

*** Always always visual line mode
    #+begin_src emacs-lisp
(add-hook 'org-mode-hook #'visual-line-mode)
    #+end_src

*** Latex
    Make it bigger.
#+begin_src emacs-lisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
        #+end_src
** [[https://orgmode.org/worg/org-tutorials/encrypting-files.html][Crypto]]
   I set org mode so that I can encrypt headings with the tag crypt
   #+BEGIN_SRC emacs-lisp
     ;; Setting for GPG encryption in org mode
     (custom-set-variables '(epg-gpg-program  "/usr/bin/gpg2"))

     (require 'org-crypt)
     (org-crypt-use-before-save-magic)
     (setq org-tags-exclude-from-inheritance (quote ("crypt")))
     ;;  set to nil to use symmetric encryption.
     (setq org-crypt-key nil)
     (setq org-tag-alist '(("crypt" . ?c)))
     ;; Auto-saving does not cooperate with org-crypt.el: so you need
     ;; to turn it off if you plan to use org-crypt.el quite often.
     ;; Otherwise, you'll get an (annoying) message each time you
     ;; start Org.

     ;; To turn it off only locally, you can insert this:
     ;;
     ;; # -*- buffer-auto-save-file-name: nil; -*-
     ;; Better yet would be to leave auto-save on globally but set it on only in org mode
     ;; This is annoying
     ;; Set again when org crypt encrypts when saving
     (add-hook 'org-mode-hook
               'auto-save-mode)
     ;;(add-hook 'org-mode-hook '(lambda()
     ;;                            (set (make-local-variable 'auto-save) nil)))
     ;; ;; Global Tags
    #+END_SRC
** Keys
   #+begin_src emacs-lisp
;;(define-key org-mode-map (kbd "M-return") nil)
   #+end_src

   #+RESULTS:

** Links
*** Don't match exact
#+begin_src emacs-lisp
(setq org-link-search-must-match-exact-headline nil)
#+end_src

*** Browser

   By default is eww
   #+begin_src emacs-lisp
(setq browse-url-browser-function 'eww-browse-url)
   #+end_src


*** Open files default app
    #+begin_src emacs-lisp
(setq org-file-apps
      '((auto-mode . emacs)
        ("\\.pdf\\'" . emacs)
        ("\\.pdf::\\([0-9]+\\)\\'" . emacs)
        ("\\.pdf.xoj" . "xournal %s")))
    #+end_src

** Export
    Translate regular ol' straight quotes to typographically-correct curly quotes
when exporting.

#+BEGIN_SRC emacs-lisp
  (setq org-export-with-smart-quotes t)
#+END_SRC

Use flycheck in the appropriate buffers:

#+begin_src emacs-lisp
  (add-hook 'markdown-mode-hook #'flycheck-mode)
  (add-hook 'gfm-mode-hook #'flycheck-mode)
  (add-hook 'text-mode-hook #'flycheck-mode)
  (add-hook 'org-mode-hook #'flycheck-mode)
  (add-hook 'verilog-mode-hook #'flycheck-mode)
  (add-hook 'arduino-mode-hook #'flycheck-mode)
#+end_src

* General settings
** Lines
    Wrap lines
#+BEGIN_SRC emacs-lisp
  (setq global-visual-line-mode t)
#+END_SRC
** Visual
   #+begin_src emacs-lisp
(add-hook 'org-mode-hook
          (lambda () (face-remap-add-relative 'default :family "Monospace")))
   #+end_src

   #+RESULTS:
*** Theme
    #+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
    #+end_src

** Terminal
   Use the settings of [[https://stackoverflow.com/questions/12224909/is-there-a-way-to-get-my-emacs-to-recognize-my-bash-aliases-and-custom-functions/12229404#12229404][bashrc when using emacs term]]:
#+begin_src emacs-lisp
  (setq shell-file-name "bash")
  (setq shell-command-switch "-ic")
#+end_src
** Snippets
   #+begin_src emacs-lisp
(setq yas-snippet-dirs '("~/dotfiles/spacemacs/.spacemacs.d/snippets"))
   #+end_src
** Helm
   #+begin_src emacs-lisp
(setq history-delete-duplicates t)
   #+end_src

* Set personal information
** Who am I? Where am I?

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Roland Coeurjoly"
        user-mail-address "rolandcoeurjoly@gmail.com")
#+END_SRC
** Highlight the current line

=global-hl-line-mode= softly highlights the background color of the line
containing point. It makes it a bit easier to find point, and it's useful when
pairing or presenting code.

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode)
#+END_SRC
* PDF
  Zoom in and out
  #+begin_src emacs-lisp
(global-set-key [C-mouse-4] 'text-scale-increase)
(global-set-key [C-mouse-5] 'text-scale-decrease)
  #+end_src

* Programming
** Software
*** CPP
    #+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
;;(load "~/clang/tools/clang-format/clang-format.el")
(global-set-key [C-M-tab] 'clang-format-region)
;;((c++-mode (helm-make-build-dir . "build/")))
;;(put 'helm-make-build-dir 'safe-local-variable 'stringp)
    #+end_src
**** Compiling
     #+begin_src emacs-lisp
(setq compile-command "docker-compose -f ~/docker-services/dev/docker-compose.yml exec dev_rhel7 bash -c \"make\"")
     #+end_src

*** Coq
    #+begin_src emacs-lisp
;;(load "~/.emacs.d/lisp/PG/generic/proof-site.el")
    #+end_src

*** SMT-LIB
    #+begin_src emacs-lisp
(setq auto-mode-alist (cons '("\\.smt$" . smtlib-mode) auto-mode-alist))
(autoload 'smtlib-mode "smtlib" "Major mode for SMTLIB" t)
(setq smtlib-solver-cmd "z3")
    #+end_src

*** Python
#+BEGIN_SRC emacs-lisp
;  (add-hook 'python-mode-hook 'company-jedi:setup)
;  (setq company-jedi:complete-on-dot t)
;  (setq elpy-rpc-backend "company-jedi")

;(eval-after-load "company"
; '(add-to-list 'company-backends 'company-anaconda))
;(spacemacs|defvar-company-backends python-mode)
#+END_SRC
*** Arduino
    #+BEGIN_SRC emacs-lisp
;; This doesn't work in Ubuntu
(autoload 'arduino-mode "arduino-mode" "Arduino mode" t )
(add-hook 'arduino-mode-hook
          'auto-complete-mode
          'company-mode)
    #+END_SRC
** General
   I use a few packages in virtually every programming or writing environment to manage the project, handle auto-completion, search for terms, and deal with version control. That's all in here.
*** =flycheck=
    Use =flycheck-mode= everywhere.
 #+BEGIN_SRC emacs-lisp
   (global-flycheck-mode t)
 #+END_SRC
*** =company=
     Use =company-mode= everywhere.
  #+BEGIN_SRC emacs-lisp
    (global-company-mode t)
  #+END_SRC
*** =auto-complete=
   Use =auto-complete-mode= everywhere.
#+BEGIN_SRC emacs-lisp
    (global-auto-complete-mode t)
#+END_SRC

*** Compile with the closest makefile (upward search)
#+BEGIN_SRC emacs-lisp
(defun* get-closest-pathname (&optional (file "Makefile"))
  "Determine the pathname of the first instance of FILE starting from the current directory towards root.
This may not do the correct thing in presence of links. If it does not find FILE, then it shall return the name
of FILE in the current directory, suitable for creation"
  (let ((root (expand-file-name "/"))) ; the win32 builds should translate this correctly
    (expand-file-name file
		      (loop
			for d = default-directory then (expand-file-name ".." d)
			if (file-exists-p (expand-file-name file d))
			return d
			if (equal d root)
			return nil))))
 (require 'compile)
#+END_SRC

*** Compile default
    #+begin_src emacs-lisp
(setq compile-command "executeInDocker make")
    #+end_src

** Hardware
*** Verilog
#+BEGIN_SRC emacs-lisp
     (autoload 'verilog-mode "verilog-mode" "Verilog mode" t )
     (add-hook 'verilog-mode-hook
               'auto-complete-mode
               'company-mode)
     (add-to-list 'auto-mode-alist '("\\.[ds]?vh?\\'" . verilog-mode))
     (setq verilog-tool 'verilog-linter)
     (setq verilog-linter "vlint ... ")
     (setq verilog-coverage "coverage ... ")
     (setq verilog-simulator "verilator ... ")
     (setq verilog-compiler "verilator ... " )
     (setq backup-directory-alist
           `((".*" . ,temporary-file-directory)))
     (setq auto-save-file-name-transforms
           `((".*" ,temporary-file-directory t)))
#+END_SRC
* Load file upon startup
#+BEGIN_SRC emacs-lisp
(find-file "~/Exocortex/Exocortex.org")
#+END_SRC
* Diff
  #+begin_src emacs-lisp
(setq ediff-diff-options "-w")
(setq diff-switches "-u --ignore-space-change")
  #+end_src

* Docker
#+begin_src emacs-lisp
;;(fset 'open_file_in_docker
;;   "\C-x\C-f\C-a\C-k/docker\C-?::drcoeurjoly@dev_dev_rhel7_1:/data/programs/oms/include/vtstore/1.6.6/Node.h")
#+end_src

#+begin_src emacs-lisp
;;(defun file_in_docker
;;    find-file "/docker:drcoeurjoly@dev_dev_rhel7_1:/")
#+end_src
