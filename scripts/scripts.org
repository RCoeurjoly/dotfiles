* Architecture
  #+begin_src shell :shebang #!/bin/bash :noweb yes :results output :tangle ../bash/.bashrc.d/scripts.bash
<<Docker>>
<<language>>
<<programming>>
<<tangle_scripts>>
sha512sum -c ~/dotfiles/bash/.bashrc.d/scripts_checksum >&/dev/null
if [ $? -eq 1 ]; then
    tangle_scripts
    echo -e "\n\n\nTangling done\n\n\n"
    source ~/.bashrc
fi
  #+end_src
* Tangling all these scripts
** Actual tangling
#+NAME: tangle_scripts
#+begin_src shell :shebang #!/bin/bash :noweb yes :results output
tangle_scripts () {
    emacs --batch -l org --eval '(org-babel-tangle-file "~/dotfiles/scripts/scripts.org")'
    <<createChecksumFile>>
}
#+end_src



** Scripts checksum
   #+NAME: createChecksumFile
   #+begin_src shell :noweb yes :exports code
echo $(sha512sum ~/dotfiles/scripts/scripts.org) > ~/dotfiles/bash/.bashrc.d/scripts_checksum
   #+end_src

* Devices
** MTP
** Kindle
   #+NAME: Kindle
   #+begin_src shell :noweb yes :exports code
<<unmountKindle>>
   #+end_src
*** Unmount
   #+NAME: unmountKindle
   #+begin_src shell :noweb yes :exports code
/bin/umount -l /media/kindle
   #+end_src

*** Get highlights
    #+NAME: zitat_kindle
    #+begin_src shell :noweb yes :exports code
~/zitat/zitat.py /media/kindle/documents/My Clippings.txt ~/my_clippings/clippings.org
    #+end_src

* Docker
** Entering docker

#+NAME: Docker
#+begin_src shell :noweb yes :exports code
switch_to_docker () {
    build_dockerimage
    CURRENTDIR=$( pwd )
    MY_UID=$UID docker-compose -f ~/docker-services/dev/docker-compose.yml up -d
    docker-compose -f ~/docker-services/dev/docker-compose.yml exec dev_rhel7 bash -c "cd ${CURRENTDIR} && bash"
}

build_dockerimage () {
    docker image build ~/docker-services/base_dev/ -t service:base_dev --build-arg "USER=$USER" --build-arg "UID=$UID"
}
<<amIinDocker>>
#+end_src

** Checking if I am in Docker
#+NAME: amIinDocker
#+begin_src shell :noweb yes :exports code
amIinDocker(){
    if isGCCgood && isOSgood; then
        echo "You are in Docker"
        return 0
    else
        echo "You are not in Docker"
        return 1
    fi
}
<<isOSgood>>
<<isGCCgood>>
#+end_src

#+NAME: isGCCgood
#+begin_src shell :noweb yes :exports code
isGCCgood(){
    GCC_IN_DOCKER='gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-36)
Copyright (C) 2015 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.'

    if [ "$(gcc --version)" == "${GCC_IN_DOCKER}" ]; then
        return 0
    else
        return 1
    fi
}
#+end_src

#+NAME: isOSgood
#+begin_src shell :noweb yes :exports code
isOSgood(){
    REDHAT_RELEASE_IN_DOCKER='CentOS Linux release 7.5.1804 (Core) '

    if [ "$(cat /etc/redhat-release)" == "${REDHAT_RELEASE_IN_DOCKER}" ]; then
        return 0
    else
        return 1
    fi
}
#+end_src
* Language
  #+NAME: language
  #+begin_src shell :noweb yes :exports code
<<Chinese>>
  #+end_src

** Chinese
   #+NAME: Chinese
   #+begin_src shell :noweb yes :exports code
<<switch_to_traditional>>
<<switch_to_simplified>>
   #+end_src

*** Switch to traditional
    #+NAME: switch_to_traditional
    #+begin_src shell :noweb yes :exports code
switch_to_traditional () {
    dconf write /desktop/ibus/engine/pinyin/InitSimplifiedChinese false; ibus restart
}
    #+end_src

*** Switch to simplified
#+NAME: switch_to_simplified
    #+begin_src shell :noweb yes :exports code
switch_to_simplified () {
    dconf write /desktop/ibus/engine/pinyin/InitSimplifiedChinese true; ibus restart
}
    #+end_src
* Programming

  #+NAME: programming
  #+begin_src shell :noweb yes :exports code
<<grepcpp>>
<<greper>>
<<generateclangcomplete>>
<<timestamp>>
  #+end_src


** C++ stuff

#+NAME: generateclangcomplete
#+begin_src shell :noweb yes :exports code
generateclangcomplete () {
    GIT_ROOT=$(git rev-parse --show-toplevel)
    echo "Removing"${GIT_ROOT}/build/
    rm -rf ${GIT_ROOT}/build/
    mkdir ${GIT_ROOT}/build/
    cd ${GIT_ROOT}/build
    clangcompletepp
    cd -
}
#+end_src
** Grepping away!

  #+NAME: grepcpp
  #+begin_src shell :noweb yes :exports code
grepcpp () {
    greper --include=\*.{cpp,h} "${@}"
}
  #+end_src

  #+NAME: greper
  #+begin_src shell :noweb yes :exports code
greper () {
    grep -IRsn --exclude-dir=build --exclude=\*.bash_history "${@}"
}
  #+end_src
** Timestamping
   #+NAME: timestamp
   #+begin_src shell :noweb yes :exports code
timestamp () {
    date +"%Y-%m-%d_%H:%M:%S.%N"
}
   #+end_src
